{"name":"Flappy-bird-command-line-game","tagline":"Flappy Bird CMD game: Command driven, turn-based version of Flappy Bird.","body":"Flappy Bird CMD Game\r\n=======================\r\n\r\nCommand driven, turn-based version of Flappy Bird written in C++ inspired by the Flappy Jam.\r\n\r\nDownload here: https://github.com/Teh-Lemon/Flappy-Bird-Command-Line-Game/releases\r\n\r\nNote: Has only been tested on Windows 7 64-bit and will require a Windows platform.\r\n\r\n![alt text](https://dl.dropboxusercontent.com/u/15765996/Images/Flappy%20Bird/2014-03-08_20-22-57.png)\r\n\r\nFeatures:\r\n- Flapping!\r\n- Random obstacle generation!\r\n- High scores!\r\n- High definition graphics!\r\n- Sound effects!\r\n- Backgrounds!\r\n- Colours!\r\n- Toggle-able sounds effects, backgrounds and colours!\r\n\r\nAbout this project\r\n-----\r\nInspired by the Flappy Game Jam, this was a side-project done over the weekend with additional improvements added over the next week. Created in C++, just because it had been a while since I had last used it.\r\n\r\nIf I were to do this project again I'd work on splitting the code up into modules. The main game class had feature creeped into this long super class.  \r\nMainly I would focus on splitting the draw function into its own class. Right now it's this big function with all the game objects and the world hard coded in.  \r\nI would add a draw function to each game object, which when called the game object would add themselves into a buffer. Then the buffer would be drawn onto the screen.  \r\nThis would also provide the benefit of supporting z depth, allowing the game objects' draw function to be called in any order.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}